#!/bin/bash
##
## azel-moontracker 
## Version 1.0
##
## For more information see:
## https://github.com/oe4dns/azel-moontracker/
##
##
## A simple shellscript that helps to track 
## the Moon for EME Hamradio purposes.
##
## azel-moontracker is a simple shellscript that
## reads the azel.dat file written by WSJT or
## other compatible programs.
##
## It then uses rotctl as provided by hamlib to
## automatically track the Moon with your antennas
## for EME - Earth-Moon-Earth contacts.
##
## Of course you still need an EME capable Hamradio
## setup with radios, antennas, amplifiers and (!!)
## a hamlib compatible rotor/controller combination.
##
## Have fun and good DX!
##

##
## Andreas Schreiner, OE4DNS
## andreas.schreiner@sonnenmulde.at
##
## License: General Public License Version 3
## See attached LICENSE file.
##


#################################################
## Configure the script according to your setup ##

## Serial Port used by the Rotor Controller
#serialport="/dev/ttyUSB0"
serialport="/dev/ttyUSB0"

## Model of the Rotor Controller
#rotormodel="603"
rotormodel="603"

## Baud Rate of the Rotor Serial Port
#baudrate=9600
baudrate=9600

## Path to the tracking data file from wsjt
## or other programs.
#input="$HOME/.wsjt/azel.dat"
input="$HOME/.wsjt/azel.dat"

## Apply azimut and elevation corrections if
## necessary. This allows to adjust for small
## errors in antenna alignment.
#azcorr=0
#elcorr=0
azcorr=0
elcorr=-5

## Maximum rotor elevation. Some rotors offer
## 90°, some offer 180°.
## Value is needed to check elevation
## boundaries following alignment correction.
#elmax=180
elmax=180




##########################################
## Usually there is no need to change   ##
## anything below this. Go ahead if you ##
## know what you are doing.             ##
##########################################

while :
do

OLDIFS=$IFS
IFS=', '
read -r f1 f2 f3 f4 < $input
IFS=$OLDIFS


## Apply antenna alignment correction.
## Calculate values using 'bc' and add leading
## zeros if the result is < 1.
f2=`echo "$f2 + $azcorr" | bc | sed 's/^\./0./'`
f3=`echo "$f3 + $elcorr" | bc | sed 's/^\./0./'`

## After correction the azimuth and elevation
## boundaries (0-360 and 0-90 degrees) have
## to be re-checked and adjusted if
## necessary.

## No azimuth < 0
if [ 1 -eq "$(echo "${f2} < 0" | bc)" ]
then  
  echo "smaller 0"
  f2=`echo "360 + $f2" | bc | sed 's/^\./0./'`
fi

## No azimuth > 360
if [ 1 -eq "$(echo "${f2} >= 360" | bc)" ]
then  
  echo "greater 360"
  f2=`echo "$f2 - 360" | bc | sed 's/^\./0./'`
fi

## Never elevate < 0
if [ 1 -eq "$(echo "${f3} < 0" | bc)" ]
then  
  f3=0
fi

## Never elevate to values greater than
## the rotor offers
if [ 1 -eq "$(echo "${f3} > $elmax" | bc)" ]
then  
  f3=$elmax
fi


## Issue rotor command
echo "rotctl -m $rotormodel -r $serialport -s $baudrate P $f2 $f3"
rotctl -m $rotormodel -r $serialport -s $baudrate P $f2 $f3

## Moon is slow, only move rotor once every 5 minutes.
sleep 300
done
